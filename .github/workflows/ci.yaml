name: React.js CI

on:
  push:
    branches: "master"
  pull_request:
    branches: "master"

jobs:
  frontend-test:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./quiz-app
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository
        uses: actions/checkout@v4

      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install project dependencies
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true

      - name: Build
        run: npm run build

      # - name: Setup SonarQube
      #   uses: warchant/setup-sonar-scanner@v8

      # - name: Analyze with SonarCloud
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: quiz-app
      #     args: >
      #       -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
      #       -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      #       -Dsonar.host.url=${{ secrets.SONAR_URL }}
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #       -Dsonar.sources=src/
      #       -Dsonar.verbose=true

  backend-test:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository
        uses: actions/checkout@v4

      - name: USE NODEJS ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4

      - name: Install project dependencies
        run: |
          npm i
          npm run lint
          npm install --save-dev --save-exact prettier
          npm run prettier
          npm test
        env:
          CI: true

      # - name: Setup SonarQube
      #   uses: warchant/setup-sonar-scanner@v8

      # - name: Analyze with SonarCloud
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: backend
      #     args: >
      #       -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
      #       -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      #       -Dsonar.host.url=${{ secrets.SONAR_URL }}
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #       -Dsonar.sources=.
      #       -Dsonar.verbose=true

  frontend-image:
    needs: frontend-test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Build and push frontend Docker image
        working-directory: ./quiz-app
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/frontend-js
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-js

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: "docker.io/${{ secrets.DOCKER_USERNAME }}/frontend-js"
      #     format: "sarif"
      #     output: "trivy-results.sarif"
      #     severity: "CRITICAL,HIGH"

  backend-image:
    needs: backend-test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Build and push backend Docker image
        working-directory: ./backend
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/backend-api
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-api

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: "docker.io/${{ secrets.DOCKER_USERNAME }}/backend-api"
      #     format: "sarif"
      #     output: "trivy-results.sarif"
      #     severity: "CRITICAL,HIGH"

  # k8s-manifest-scan:
  #   needs: [backend-test, frontend-test]
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Run Trivy to check Kubernetes manifest files
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: config
  #         scan-ref: kubernetes-manifest/
  #         format: table
  #         severity: "CRITICAL,HIGH"

  k8s-deploy:
    needs: [frontend-image, backend-image]
    runs-on: self-hosted

    steps:
      - name: üì¶ Checkout repo
        uses: actions/checkout@v4

      - name: üß∞ Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: ‚öôÔ∏è Generate kubeconfig from EKS
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }}

      - name: üîç Validate kubeconfig context
        run: kubectl config current-context

      - name: üöÄ Deploy to Kubernetes (Namespace quiz)
        run: |
          for manifest in secret.yaml database.yaml backend.yaml frontend.yaml ingress.yaml; do
            kubectl apply -f kubernetes-manifest/$manifest --validate=false -n quiz
          done

          kubectl rollout status deployment/backend -n quiz
          kubectl rollout status deployment/frontend -n quiz
